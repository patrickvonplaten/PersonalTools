#!/usr/bin/env python3
import os 
import sys
import argparse
from returnnTfNetworkLayerPlotter import ReturnnLayerPlotter
import shutil
import subprocess
import ipdb

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="""
    Command line tool to plot trained weights given back by returnn.
    Type and other configuration of plot for some layer  can be specified.
    Make sure to run the script in a folder that contains both the configuration file 
    of returnn and the saved model networks.  
    should be defined accordingl
    """)

    parser.add_argument('--dir', help='Step directory where returnn network files are stored. If nothing is provided, the current directory will be used as the step directory', default=None)
    parser.add_argument('--layer', help='Name of layer as defined in returnn config file that is to be plotted,f.e.: "CNNLayer1_kernels, FCLayer1_weight"', default='CNNLayer1_kernels')
    parser.add_argument('--hmm', help='relativ path to hmm folder which contains the weights to be plotted', default='hmm0')
    parser.add_argument('--title', help='Title for all plots, that should be specified by the user', default='plot')
    parser.add_argument('--type', help="""
    Decide which plotting type is wanted. Make a list by choesing of '1D','1Dd','2D',3Dh' with 
    '1D' = weights, time plotting for all filters on one plot for all epochs
    '1Dd' = weights, time plotting over specified epochs for all filters in multiple plots defined by other configurations
    'Stat' = 2D filter stats in freq domain are plotted
    '2D' = filter, weights plotting with values shown in heat mapping
    '3D' = for 2D filters only. filter's first dimension, weights plotting with values shown in heat mapping over multiple plots for all filter's second dimension.
    Default is 'all' meaning that all possible plots for this layer are plotted. 
    """, default='1D,1Dd,2D,3Dh,Stat')
    parser.add_argument('--c',help='define colors used for matplotlib colors for 1D plots. Make sure that num of colors is equal to samplesPerRow', default='c,b,r,g')
    parser.add_argument('--cmap',help='define colormap theme used for 2D Heat Map for conv layers.' , default='hot')
    parser.add_argument('--spr',help='samples to be plotted per row in plot',default=4)
    parser.add_argument('--spc',help='samples to be plotted per column in plot',default=0)
    parser.add_argument('--figS',help='figure size of plot as tuple',default='22,27')
    parser.add_argument('--r',help='epoch range over which weights should be plotted. In case in detail plots should be plotted, this arguments needs to be set! Default is last = -1 ',default='-1')
    parser.add_argument('--layType', help='put in the layer type to plot', default='conv') 
    parser.add_argument('--d',help='domains that should be plotted: "time" and/or "freq"',default='time,freq')
    parser.add_argument('--init',help='if layer is initialized with previously trained network, give the path to the MMF weight file. Obviously, dimension of weights have to match', default=None)
    parser.add_argument('--sampRate',help='if "pad" is added weight array is padded to fit sample rate, which can be set here.', default=16000)
    parser.add_argument('--filt',help='states which filter functions for freq peaks should be used when doing the "Stat" plot', default='narrowBand,band,cleanPeaks,dirtyPeaks')
    parser.add_argument('-rf', action='store_true', default=False, help='If "-rf" is added then weight directory will be deleted and recreated') 
    parser.add_argument('-rev', action='store_true', default=False, help='If "-rev" is added then weights array will be flippend for every kernel') 
    parser.add_argument('-log', action='store_true', default=False, help='If "-log" is added then plots of conv layer will be plotted in log scale') 
    parser.add_argument('-pad', action='store_true', default=False, help='If "-pad" is added then fourier transform is done on zero padded array so that it fits with the sampling rate') 
    parser.add_argument('-a', action='store_true', default=False, help='If "-a" is added then the network structure will be loaded and shown') 

    args = vars(parser.parse_args())

    parseStringToList = ['type','d','c','r','filt']
    for arg in parseStringToList:
        args[arg] = args[arg].split(',')

    parseToIntTuple = ['figS']
    for arg in parseToIntTuple:
        args[arg] = tuple([int(x) for x in args[arg].split(',')])

    plottingsFullName={
        '1D': '1DWeightsSimpleAll',
        '1Dd': '1DWeightsSimpleDetail',
        '2D': '2DWeightsHeat',
        'Stat': '2DFilterStats',
        '3Dh': '3DWeightsHeat'
    }

    plottingConfigs={
        'samplesPerRow': args['spr'],
        'samplesPerColumn': args['spc'],
        'plotRange': args['r'],
        'figSize': args['figS'],
        'domainType': args['d'],
        'typeOfPlotting': [ plottingsFullName[x] for x in args['type']],
        'colors': args['c'],
        'title': args['title'],
        'cmap': args['cmap'],
        'log': args['log'],
        'layerType': args['layType'],
        'reverse': args['rev'],
        'pad': args['pad'],
        'sampleRate': args['sampRate'],
        'filterFunctions': args['filt']
    }

    bashCommand = "pwd"
    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    pathToStepDir = output[:-1].decode('utf-8')
    modelDirRelativ = args['hmm']

    if(not not args['dir']):
        pathToStepDir = args['dir']
        
    modelDir = os.path.join(pathToStepDir,modelDirRelativ)

    pathToInitWeight = args['init']
    layerNameForInitWeight = None
    layerName = args['layer']
    pathLayerName = layerName.replace('/','_')
    pathToAnalysisDir = pathToStepDir + '/analysis_' + pathLayerName + '_layer'
    pathToSaveWeightsDir = pathToAnalysisDir + '/weights_' + pathLayerName + '_layer'

    doSaveWeights = args['rf']
    doWeightExist = os.path.exists(pathToSaveWeightsDir)
    doAnalysisDirExist = os.path.exists(pathToAnalysisDir)

    if pathToInitWeight:
        plottingConfigs['plotRange'].insert(0, 0)

    if not doAnalysisDirExist:
        os.makedirs(pathToAnalysisDir)

    if doWeightExist and doSaveWeights:
        shutil.rmtree(pathToSaveWeightsDir)
        
    if doWeightExist and doSaveWeights or not doWeightExist:
        os.makedirs(pathToSaveWeightsDir)

    if(doSaveWeights or not doWeightExist):
        from returnnTfNetworkLayerSaver import LayerWeightSaver
        lws = LayerWeightSaver(modelDir, pathToSaveWeightsDir, layerName, pathToInitWeight)
        numEpochs = lws.numEpochs
    else:
        print("Weights already exist. If you want to delete old weights and save new weights, add '-rf' to the command.")
        numEpochs = len([x for x in os.listdir(pathToSaveWeightsDir)]) 

    layerPlotter = ReturnnLayerPlotter(pathToAnalysisDir, pathToSaveWeightsDir, layerName, plottingConfigs, numEpochs)
    layerPlotter.run()


